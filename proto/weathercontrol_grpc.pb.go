// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: weathercontrol.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WeatherControlService_GetWeather_FullMethodName = "/weathercontrol.v1.WeatherControlService/GetWeather"
	WeatherControlService_SetWeather_FullMethodName = "/weathercontrol.v1.WeatherControlService/SetWeather"
)

// WeatherControlServiceClient is the client API for WeatherControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeatherControlServiceClient interface {
	// Selects the latest weather that has been set, or a default of {"Sunny", 1}.
	GetWeather(ctx context.Context, in *GetWeatherRequest, opts ...grpc.CallOption) (*GetWeatherResponse, error)
	// Adds a new weather to the database, should be validated hopefully.
	SetWeather(ctx context.Context, in *SetWeatherRequest, opts ...grpc.CallOption) (*SetWeatherResponse, error)
}

type weatherControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherControlServiceClient(cc grpc.ClientConnInterface) WeatherControlServiceClient {
	return &weatherControlServiceClient{cc}
}

func (c *weatherControlServiceClient) GetWeather(ctx context.Context, in *GetWeatherRequest, opts ...grpc.CallOption) (*GetWeatherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWeatherResponse)
	err := c.cc.Invoke(ctx, WeatherControlService_GetWeather_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherControlServiceClient) SetWeather(ctx context.Context, in *SetWeatherRequest, opts ...grpc.CallOption) (*SetWeatherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetWeatherResponse)
	err := c.cc.Invoke(ctx, WeatherControlService_SetWeather_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherControlServiceServer is the server API for WeatherControlService service.
// All implementations must embed UnimplementedWeatherControlServiceServer
// for forward compatibility.
type WeatherControlServiceServer interface {
	// Selects the latest weather that has been set, or a default of {"Sunny", 1}.
	GetWeather(context.Context, *GetWeatherRequest) (*GetWeatherResponse, error)
	// Adds a new weather to the database, should be validated hopefully.
	SetWeather(context.Context, *SetWeatherRequest) (*SetWeatherResponse, error)
	mustEmbedUnimplementedWeatherControlServiceServer()
}

// UnimplementedWeatherControlServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWeatherControlServiceServer struct{}

func (UnimplementedWeatherControlServiceServer) GetWeather(context.Context, *GetWeatherRequest) (*GetWeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeather not implemented")
}
func (UnimplementedWeatherControlServiceServer) SetWeather(context.Context, *SetWeatherRequest) (*SetWeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWeather not implemented")
}
func (UnimplementedWeatherControlServiceServer) mustEmbedUnimplementedWeatherControlServiceServer() {}
func (UnimplementedWeatherControlServiceServer) testEmbeddedByValue()                               {}

// UnsafeWeatherControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherControlServiceServer will
// result in compilation errors.
type UnsafeWeatherControlServiceServer interface {
	mustEmbedUnimplementedWeatherControlServiceServer()
}

func RegisterWeatherControlServiceServer(s grpc.ServiceRegistrar, srv WeatherControlServiceServer) {
	// If the following call pancis, it indicates UnimplementedWeatherControlServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WeatherControlService_ServiceDesc, srv)
}

func _WeatherControlService_GetWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherControlServiceServer).GetWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeatherControlService_GetWeather_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherControlServiceServer).GetWeather(ctx, req.(*GetWeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherControlService_SetWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherControlServiceServer).SetWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeatherControlService_SetWeather_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherControlServiceServer).SetWeather(ctx, req.(*SetWeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeatherControlService_ServiceDesc is the grpc.ServiceDesc for WeatherControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeatherControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weathercontrol.v1.WeatherControlService",
	HandlerType: (*WeatherControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeather",
			Handler:    _WeatherControlService_GetWeather_Handler,
		},
		{
			MethodName: "SetWeather",
			Handler:    _WeatherControlService_SetWeather_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weathercontrol.proto",
}
